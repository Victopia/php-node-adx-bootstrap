angular.module("schemaForm").run(["$templateCache",function($templateCache){$templateCache.put("directives/decorators/bootstrap/external-options/external-options.html","<div class=\"form-group\" \n     ng-class=\"{\n               \'has-error\': form.disableErrorState !== true && hasError(), \n               \'has-success\': form.disableSuccessState !== true && hasSuccess(), \n               \'has-feedback\': form.feedback !== false, \n               \'float\': form.float === true \n     }\">\n  <label class=\"control-label\" ng-show=\"showTitle()\">\n    {{form.title}}\n  </label><select ng-model=\"form.selectedOption\"\n          ng-model-options=\"form.ngModelOptions\"\n          ng-disabled=\"form.readonly\"\n          sf-changed=\"form\"\n          ng-change=\"changed()\"\n          class=\"form-control\"\n          schema-validate=\"form\"\n          external-options\n          links=\"form.schema.links\"\n          model=\"model\"\n          form=\"form\"\n          test=\"evalExpr(this)\"\n          ng-options=\"item.value as item.name for item in form.options\" destroy-hidden-data>\n          <option ng-show=\"form.selectedOption\" value=\"\"></option>\n  </select>\n  <div class=\"help-block\"\n       ng-show=\"(hasError() && errorMessage(schemaError()))\"\n       ng-bind-html=\"(hasError() && errorMessage(schemaError()))\"></div>\n</div>\n");}]);angular.module('schemaForm').directive('externalOptions',function(){return{restrict:'A',require:['ngModel','?^sfSchema'],scope:{test:'=',form:'=',model:'='},controller:['$scope','$http','$interpolate','$filter','sfSelect',function($scope,$http,$interpolate,$filter,sfSelect){var i,scope=$scope;scope.form.options=[];scope.currentSource='';scope.externalOptions={};var processOptions=function(optionSource,data,current){var enumTitleMap=[];if(data.enum&&data.enum.length){for(i=0;i<data.enum.length;i++){if(data.enum[i]&&data.enum[i].length){enumTitleMap.push({name:data.enum[i],value:data.enum[i]});};};scope.form.options=enumTitleMap;}
else if(data.titleMap){scope.form.options=data.titleMap;};if(scope.externalOptions[optionSource]!==data){scope.externalOptions[optionSource]=data;};scope.$watch('form.selectedOption',function(newValue,oldValue){sfSelect(scope.form.key,scope.model,scope.form.selectedOption);});for(var i=0;i<scope.form.options.length;i++){if(typeof scope.form.options[i].value!=='undefined'&&current===scope.form.options[i].value){scope.form.selectedOption=scope.form.options[i].value;return;}};sfSelect(scope.form.key,scope.model,'null');return;};var loadOptions=function(optionSource,newValue){if(scope.currentSource===optionSource&&(typeof scope.externalOptions[optionSource]==='object')){return;}
else{scope.currentSource=optionSource;};var current=sfSelect(scope.form.key,scope.model);current=(current)?current:undefined;optionSource=$filter('_externalOptionUri')(optionSource);if(typeof scope.externalOptions[optionSource]==='object'){processOptions(optionSource,scope.externalOptions[optionSource],current);return;};$http.get(optionSource,{responseType:'json'}).then(function(res,status){processOptions(optionSource,res.data,current);},function(res,status){scope.form.options=[];scope.form.selectedOption='';sfSelect(scope.form.key,scope.model,scope.form.selectedOption);});};if(!!scope.form.optionData){scope.$parent.evalExpr('this').$watchCollection(scope.form.optionData,function(newOptions,oldOptions){var options={};if(angular.isArray(newOptions)){options=(angular.isString(newOptions[0]))?{enum:newOptions}:{titleMap:newOptions};};processOptions('data:'+scope.form.optionData,options,scope.form.selectedOption);});}
else if(scope.form.parameters&&scope.form.parameters.length){for(var i=0;i<scope.form.parameters.length;i++){if(angular.isDefined(scope.form.parameters[i])){scope.$watch(scope.form.parameters[i][1],function(newValue,oldValue){var newValue=$filter('_externalOptionUriField')(newValue),exp,optionSource;if(newValue){exp=$interpolate(scope.form.optionSource,false,null,true);optionSource=exp(scope);loadOptions(optionSource,scope.form.key);}
else{scope.form.options=[];};});};};}
else{loadOptions(scope.form.optionSource);};}]};}).filter('_externalOptionUriField',['$injector','$filter',function($injector,$filter){var _externalOptionUriFieldFilter=function(input){if($injector.has('externalOptionUriFieldFilter')){input=$filter('externalOptionUriField')(input);};return input;};return _externalOptionUriFieldFilter;}]).filter('_externalOptionUri',['$injector','$filter',function($injector,$filter){var _externalOptionUriFilter=function(input){if($injector.has('externalOptionUriFilter')){input=$filter('externalOptionUri')(input);};return input;};return _externalOptionUriFilter;}]);(function(angular,undefined){'use strict';angular.module('schemaForm').directive('destroyHiddenData',['sfSelect',function(sfSelect){return{link:function(scope,element,attrs){var preserve=false;scope.$on('$destroy',function(){if(typeof scope.form.preserveOnDestroy==='object'&&scope.form.preserveOnDestroy.condition){preserve=scope.evalExpr(scope.form.preserveOnDestroy.condition);}
else if(!!scope.form.preserveOnDestroy){preserve=true;};if(!preserve){scope.form.selectedOption='';sfSelect(scope.form.key,scope.model,scope.form.selectedOption);};});}};}]);})(window.angular);(function(angular,undefined){'use strict';angular.module('schemaForm').directive('oyInline',['schemaForm','sfValidator','sfPath','sfSelect',function(schemaForm,sfValidator,sfPath,sfSelect){return{restrict:'A',require:'ngModel',scope:{oyInline:'=',ngModel:'=',ngModelOptions:'=',model:'=',sfChanged:'=',schemaValidate:'='},link:function(scope,element,attrs,ngModel){var useKey=sfPath.stringify(scope.schemaValidate.key),schema={},title=scope.schemaValidate.title||scope.schemaValidate.key.join('.')||'';angular.copy(scope.schemaValidate.schema,schema);if(schema.properties&&schema.anyOf){scope.schemaValidate.schema.allowInvalid=true;delete schema.properties;};ngModel.$name=title;ngModel.$options.allowInvalid=true;scope.$watchCollection('model'+useKey,function(newVal,oldVal){if(ngModel.$validate){ngModel.$validate();if(ngModel.$invalid){ngModel.$dirty=true;ngModel.$pristine=false;}}
else{ngModel.$setViewValue(ngModel.$viewValue);}});ngModel.$validators={anyOf:function(modelValue,viewValue){tv4.validate(scope.ngModel,schema);return tv4.valid;}};scope.$on('schemaFormValidate',function(){if(ngModel.$validate){ngModel.$validate();if(ngModel.$invalid){ngModel.$dirty=true;ngModel.$pristine=false;}}
else{ngModel.$setViewValue(ngModel.$viewValue);};});}};}]);})(window.angular);angular.module('schemaForm').config(['schemaFormProvider','schemaFormDecoratorsProvider','sfPathProvider',function(schemaFormProvider,schemaFormDecoratorsProvider,sfPathProvider){var i,externalOptions;externalOptions=function(name,schema,options){var schema=schema||{};var stringType=(schema.type==='string')?'string':schema.type;if(typeof stringType==='Array'){stringType=!!schema.type.indexOf('string');};if(stringType&&schema.links&&(typeof schema.links)==='object'){for(i=0;i<schema.links.length;i++){if(schema.links[i].rel==='options'){var related=/({)([^}]*)(})/gm;var source=/{{([^}]*)}}/gm;var f=schemaFormProvider.stdFormObj(name,schema,options);f.key=options.path;f.type='select-external';f.optionSource=schema.links[i].href.replace(related,'$1$1 model.$2 | _externalOptionUri $3$3');f.options=[];f.schema=schema;f.parameters=[];var matched=f.optionSource.match(source);while((matched=source.exec(f.optionSource))!==null){f.parameters.push(matched);}
options.lookup[sfPathProvider.stringify(options.path)]=f;return f;}}}};schemaFormProvider.defaults.string.unshift(externalOptions);schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','select-external','directives/decorators/bootstrap/external-options/external-options.html');schemaFormDecoratorsProvider.createDirective('select-external','directives/decorators/bootstrap/external-options/external-options.html');}]);