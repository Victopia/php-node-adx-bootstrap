;(function(){'use strict';angular.module('common.utils',[]).factory('objectToFormData',function(){return objectToFormData;}).factory('$multipartInterceptor',function(){return{request:interceptMultipartRequest};});function objectHasFile(data){if(angular.isObject(data)){if((data instanceof File)||(data instanceof FileList)){return true;}
for(var property in data){if(objectHasFile(data[property])){return true;}}}
return false;}
function objectToFormData(obj,formData,namespace){var formKey;if(!formData){formData=new FormData();}
if(!angular.isObject(obj)||(obj instanceof File)){if(obj===null){obj='__null';}
else if(obj===true){obj='__true';}
else if(obj===false){obj='__false';}
formData.append(namespace,obj);}
else{for(var property in obj){if(obj.hasOwnProperty(property)){if(namespace){formKey=namespace+'['+property+']';}else{formKey=property;}
objectToFormData(obj[property],formData,formKey);}}}
return formData;};function transformMultipartRequest(data,headersGetter){var headers=headersGetter();if(/^multipart\/form\-data/.test(headers['Content-Type'])){return objectToFormData(data);}
return data;}
function interceptMultipartRequest(config){if(String(config.method).toLowerCase()=='post'){if(objectHasFile(config.data)){delete config.headers['Content-Type'];config.data=objectToFormData(config.data);config.transformRequest=angular.identity;}}
return config;}})();